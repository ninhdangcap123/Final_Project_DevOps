pipeline {
    agent any

    environment {
        AWS_REGION = 'us-east-1'
        AWS_DEFAULT_REGION = "${AWS_REGION}"
        IMAGE_TAG = 'latest'
        CLUSTER_NAME = 'ninhnh-vti-cluster'
        DEPLOYMENT_NAME = 'python-app-deployment'
        AWS_ACCOUNT_ID = '084375555299'
    }

    stages {
        stage('Check User') {
            steps {
                sh 'whoami'
            }
        }

        stage('Clone Repository') {
            steps {
                git url: 'https://github.com/ninhdangcap123/Final_Project_DevOps.git', branch: 'main'
            }
        }

        stage('Check AWS CLI') {
            steps {
                sh 'echo $PATH'
                sh 'aws --version'
            }
        }

        stage('Load Environment Variables') {
            steps {
                script {
                    // Load environment variables from output.env
                    sh 'set -o allexport; source output.env; set +o allexport'
                    env.RDS_URI = sh(script: 'echo $RDS_ENDPOINT', returnStdout: true).trim()
                    env.ECR_REPOSITORY = sh(script: 'echo $ECR_REPOSITORY_URL', returnStdout: true).trim()

                    echo "RDS URI: ${env.RDS_URI}"
                    echo "ECR Repository URI: ${env.ECR_REPOSITORY}"
                }
            }
        }

        stage('List Files') {
            steps {
                dir('application/backend') {
                    sh 'ls -l'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    dir('application/backend') {
                        sh 'ls -l'
                        sh "docker build -t ${ECR_REPOSITORY}:${IMAGE_TAG} ."
                    }
                }
            }
        }

        stage('Push to ECR') {
            steps {
                script {
                    sh '''
                    docker push ${ECR_REPOSITORY}:${IMAGE_TAG}
                    '''
                }
            }
        }

        stage('Update Deployment YAML') {
            steps {
                script {
                    sh """
                    sed -i 's|{{ .Values.image.repo }}:{{ .Values.image.tag }}|${ECR_REPOSITORY}:${IMAGE_TAG}|g' application/k8s/deployment.yaml
                    sed -i 's|DB_HOST_PLACEHOLDER|${RDS_URI}|g' application/k8s/deployment.yaml
                    """
                }
            }
        }

        stage('Deploy to EKS') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'aws-credentials', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                        sh '''
                        kubectl apply -f application/k8s/deployment.yaml
                        '''
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Deployment to EKS was successful!'
        }
        failure {
            echo 'Deployment to EKS failed.'
        }
    }
}
